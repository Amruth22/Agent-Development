version: '3.8'

services:
  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: research-rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: research123
      RABBITMQ_DEFAULT_VHOST: /research
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - research-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for task result storage
  redis:
    image: redis:7-alpine
    container_name: research-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - research-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: research-api
    ports:
      - "8000:8000"
    environment:
      # API Settings
      ENVIRONMENT: production
      HOST: 0.0.0.0
      PORT: 8000
      DEBUG: false
      
      # RabbitMQ Settings
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: admin
      RABBITMQ_PASSWORD: research123
      RABBITMQ_VHOST: /research
      
      # Redis Settings
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Research Agent Settings
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      DEFAULT_MAX_ITERATIONS: 10
      ENABLE_FILE_GENERATION: true
      
      # Security
      REQUIRE_API_KEY: false
    volumes:
      - ./reports:/app/reports
      - ./data:/app/data
    networks:
      - research-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # RabbitMQ Consumer (Background Worker)
  consumer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: research-consumer
    command: python run_api.py consumer
    environment:
      # RabbitMQ Settings
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: admin
      RABBITMQ_PASSWORD: research123
      RABBITMQ_VHOST: /research
      
      # Redis Settings
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Research Agent Settings
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      DEFAULT_MAX_ITERATIONS: 10
      ENABLE_FILE_GENERATION: true
    volumes:
      - ./reports:/app/reports
      - ./data:/app/data
    networks:
      - research-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2  # Run 2 consumer instances for load balancing

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: research-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - research-network
    depends_on:
      - api
    restart: unless-stopped
    profiles:
      - production  # Only start with --profile production

volumes:
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local

networks:
  research-network:
    driver: bridge